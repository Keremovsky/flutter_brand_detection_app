// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/history_item_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4616361811087595503),
      name: 'HistoryItemModel',
      lastPropertyId: const IdUid(12, 2549566361628381264),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 18998864006186149),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6342741939098942063),
            name: 'searchDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4861569587787303963),
            name: 'resultIds',
            type: 27,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 78741157950480097),
            name: 'companyNames',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5652458175882306342),
            name: 'descriptions',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 953220884807358597),
            name: 'countries',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4592926495613444453),
            name: 'timeZones',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3907755340728282097),
            name: 'websites',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 9044206562371174752),
            name: 'similarityPercentages',
            type: 29,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7239954153155191308),
            name: 'isSaved',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2549566361628381264),
            name: 'twitters',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 4616361811087595503),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [8786919916786651730],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    HistoryItemModel: EntityDefinition<HistoryItemModel>(
        model: _entities[0],
        toOneRelations: (HistoryItemModel object) => [],
        toManyRelations: (HistoryItemModel object) => {},
        getId: (HistoryItemModel object) => object.id,
        setId: (HistoryItemModel object, int id) {
          object.id = id;
        },
        objectToFB: (HistoryItemModel object, fb.Builder fbb) {
          final resultIdsOffset = fbb.writeListInt64(object.resultIds);
          final companyNamesOffset = fbb.writeList(
              object.companyNames.map(fbb.writeString).toList(growable: false));
          final descriptionsOffset = fbb.writeList(
              object.descriptions.map(fbb.writeString).toList(growable: false));
          final countriesOffset = fbb.writeList(
              object.countries.map(fbb.writeString).toList(growable: false));
          final timeZonesOffset = fbb.writeList(
              object.timeZones.map(fbb.writeString).toList(growable: false));
          final websitesOffset = fbb.writeList(
              object.websites.map(fbb.writeString).toList(growable: false));
          final similarityPercentagesOffset =
              fbb.writeListFloat64(object.similarityPercentages);
          final twittersOffset = fbb.writeList(
              object.twitters.map(fbb.writeString).toList(growable: false));
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.searchDate.millisecondsSinceEpoch);
          fbb.addOffset(2, resultIdsOffset);
          fbb.addOffset(3, companyNamesOffset);
          fbb.addOffset(4, descriptionsOffset);
          fbb.addOffset(5, countriesOffset);
          fbb.addOffset(6, timeZonesOffset);
          fbb.addOffset(7, websitesOffset);
          fbb.addOffset(9, similarityPercentagesOffset);
          fbb.addBool(10, object.isSaved);
          fbb.addOffset(11, twittersOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final searchDateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final resultIdsParam =
              const fb.ListReader<int>(fb.Int64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 8, []);
          final companyNamesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 10, []);
          final descriptionsParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 12, []);
          final countriesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 14, []);
          final timeZonesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 16, []);
          final websitesParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 18, []);
          final twittersParam = const fb.ListReader<String>(
                  fb.StringReader(asciiOptimization: true),
                  lazy: false)
              .vTableGet(buffer, rootOffset, 26, []);
          final similarityPercentagesParam =
              const fb.ListReader<double>(fb.Float64Reader(), lazy: false)
                  .vTableGet(buffer, rootOffset, 22, []);
          final isSavedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 24, false);
          final object = HistoryItemModel(
              id: idParam,
              searchDate: searchDateParam,
              resultIds: resultIdsParam,
              companyNames: companyNamesParam,
              descriptions: descriptionsParam,
              countries: countriesParam,
              timeZones: timeZonesParam,
              websites: websitesParam,
              twitters: twittersParam,
              similarityPercentages: similarityPercentagesParam,
              isSaved: isSavedParam);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [HistoryItemModel] entity fields to define ObjectBox queries.
class HistoryItemModel_ {
  /// see [HistoryItemModel.id]
  static final id =
      QueryIntegerProperty<HistoryItemModel>(_entities[0].properties[0]);

  /// see [HistoryItemModel.searchDate]
  static final searchDate =
      QueryIntegerProperty<HistoryItemModel>(_entities[0].properties[1]);

  /// see [HistoryItemModel.resultIds]
  static final resultIds =
      QueryIntegerVectorProperty<HistoryItemModel>(_entities[0].properties[2]);

  /// see [HistoryItemModel.companyNames]
  static final companyNames =
      QueryStringVectorProperty<HistoryItemModel>(_entities[0].properties[3]);

  /// see [HistoryItemModel.descriptions]
  static final descriptions =
      QueryStringVectorProperty<HistoryItemModel>(_entities[0].properties[4]);

  /// see [HistoryItemModel.countries]
  static final countries =
      QueryStringVectorProperty<HistoryItemModel>(_entities[0].properties[5]);

  /// see [HistoryItemModel.timeZones]
  static final timeZones =
      QueryStringVectorProperty<HistoryItemModel>(_entities[0].properties[6]);

  /// see [HistoryItemModel.websites]
  static final websites =
      QueryStringVectorProperty<HistoryItemModel>(_entities[0].properties[7]);

  /// see [HistoryItemModel.similarityPercentages]
  static final similarityPercentages =
      QueryDoubleVectorProperty<HistoryItemModel>(_entities[0].properties[8]);

  /// see [HistoryItemModel.isSaved]
  static final isSaved =
      QueryBooleanProperty<HistoryItemModel>(_entities[0].properties[9]);

  /// see [HistoryItemModel.twitters]
  static final twitters =
      QueryStringVectorProperty<HistoryItemModel>(_entities[0].properties[10]);
}
